Studio 3 write up

Your TA's name: Tony De La Nuez



Students in your studio group:

    Name        Student ID (begins with a 4)
	
1. Skylar Nam     435454
2. Seunghan Bae   423311
3.
4.
5.
6.


Part A

What are three data types that can serve as T?
int, double, character

Which class did you pick to examine its compareTo method?
UUID

How did its compareTo method impose a natural order on that class's instances?
-1, 0, 1 as this UUID is less than, or equal to, or greater than val


Part B

How does compareTo work?  Does it always return either -1, 0, or +1?
there are some exceptions
nullpointerexception: if the specified object is null
classcastexception: if the specified object's type prevents it from being compared to this object

calendar: value is less than 0 if the time of this calendar is before the time represented by the argument
value > 0 otherwise (not exactly -1, 0, 1)

Part C

From your inspection of the LinkedList<T> class's source code:
Given a LinkedList<T> of size n, what is the asymptotic complexity, worst-case, 
for performing each of the following operations?

  1)  Appending to the end of that list  addLast(..) O(1)
  
  2)  Prepending to the beginning of that list   addFirst(...) O(1)
  
  3)  Inserting an element in the middle of the list  add(size/2, .....) O(n)
  
And for your implementation of a PriorityQueue using the Unordered List, 
given n elements already in the queue, what is the asymptotic complexity, 
worst-case for performing each of the following operations?
  
  4)  extractMin O(n)
  
  5)  insert O(1)
  // unordered list - don't care the location
  
  6)  isEmpty O(1)
  
  
Part D

From your implementation of OrderedArray, what is the asymptotic complexity, worst-case, for performing each of the following operations?

  1)  Adding an element at the end of the array O(n)
  
  
  2)  Inserting an element at the beginning of the array O(n)
  
  
  3)  Inserting an element in the middle of the list O(n)

And for your implementation of a PriorityQueue using the Ordered Array, 
given n elements already in the queue, what is the asymptotic complexity, 
worst-case for performing each of the following operations?
  
  4)  extractMin O(n)
  
  5)  insert O(n)
  
  6)  isEmpty O(1)
  
 
 Are there situations when you would want to use the OrderedArray or the UnorderedList instead of
 the binary heap described in class?   Explain please.
