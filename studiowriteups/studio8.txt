Studio 8 write up

Your TA's name:



Students in your studio group:

    Name        Student ID (begins with a 4)
	
1. Skylar Nam     435454
2. Seunghan Bae   423311
3.
4.
5.
6.



1. a graph that resembles a random uniform distribution
2. it would look denser at some points and sparser at other points
3. 3 objects
4. 2 objects
5. because sets consider new Color (0,0,0) and Color.BLACK as the same and does not allow duplicates.
Thus, the "Black" color was only added once (returning true.)
6. Yes, the hash values were distributed pretty much uniformly.
7. 2 objects
8. 2 objects
9. because only one object should have been added.
10. If the points have the same x, y coordinates, then they're the same.
11. Even though we're looking at the "set" of points, the implementation of hashcode() for Point added those that are the same.
Thus, the hashcode() function seems to have some problem.
12. Very well!
13. Yes
14. Even if they do not equal each other, they can result in the same hashcode
15. if radius = 20 and !wheat, the hashcode value = 20. if radius = 15 and wheat, then the value is again 20.
16. public int hashCode(){
		int hash = radius;
		if (wheat) return hash;
		else return -hash;
	}
17. Yes
18. 
public int hashCode(){
		int hash = brand.hashCode();
		
		return (int)(density * 31) + hash;
	}
19. They are uniformly distributed.






What distribution do you see plotted (in the histogram or an XY Scatter plot) for Color hashcodes?



If the distribution were not uniform, what would the plot look like?

How many Color objects are added to the set?

How many objects are contained in the set after all Color objects are added?

Why are the above two numbers different?





Are the Point objects' hash values distributed uniformly?


How many Point objects are added to the set?


How many Point objects are in the set after all Point objects are added?


What is wrong with this result?

Based on the code you see in Point, how is equality determined between two Point objects?


Looking at the output in the console window, how does the implementation of hashCode() for Point explain the bad behavior in the set of Points?


How well does your hash function fare in terms of uniformly distributed hash values for the random point objects?



As a team, try out some ideas for Pancake's hashCode() implementation. Record your best idea in the studio8.txt file (here!):


Based on the hashCode() implementation shown to you on the web page, answer the following questions:

If two Pancake objects equal each other, will they get the same hashCode() results?

How good of a job does the implementation do of obtaining uniform distributions of hashCode() values for two Pancake objects that do not equal each other?



Just by inspection of the hashCode() method on the web page, state two Pancakes that are different yet have the same hashCode() value.


Your best hashCode() for Pancake (paste the method here please):





Do your hashCode() values for Pancake appear to be uniformly distributed?




Your implementation of Syrup's hashCode() -- paste here:







How uniformly distributed are your Syrup hashCode() values?



How uniformly distributed are your PancakeAndSyrup hashCode() values?













